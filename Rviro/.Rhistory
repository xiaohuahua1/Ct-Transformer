library(tidyverse)
library(ggthemes)
library(ggpubr)
library(ggsci)
library(data.table)
library(patchwork)
library(fitdistrplus)
library(deSolve)
library(lazymcmc)
library(odin)
library(doParallel)
library(coda)
library(virosolver)
data(example_ct_data)
View(example_ct_data)
library(virosolver)
library(lazymcmc)
library(tidyverse)
library(ggthemes)
install.packages("ggpubr")
install.packages("ggpubr")
install.packages("ggpubr")
install.packages(c("askpass", "bit", "blob", "broom", "bslib", "cachem", "callr", "cli", "colorspace", "commonmark", "cpp11", "credentials", "curl", "data.table", "dbplyr", "deSolve", "digest", "downlit", "dplyr", "dtplyr", "evaluate", "fansi", "fastmap", "fitdistrplus", "fontawesome", "forcats", "fs", "gargle", "gert", "ggplot2", "gh", "googledrive", "googlesheets4", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "isoband", "jsonlite", "knitr", "labeling", "later", "lubridate", "modelr", "openssl", "patchwork", "pillar", "pkgbuild", "pkgdown", "pkgload", "plyr", "processx", "profvis", "promises", "ps", "purrr", "ragg", "Rcpp", "readr", "readxl", "rematch", "remotes", "ring", "rlang", "rmarkdown", "roxygen2", "rstudioapi", "sass", "shiny", "sourcetools", "stringi", "stringr", "sys", "testthat", "tibble", "tidyr", "tidyverse", "tinytex", "tzdb", "usethis", "utf8", "uuid", "vctrs", "viridisLite", "vroom", "waldo", "whisker", "xfun", "xml2", "yaml", "zip"))
install.packages("EpiEstim")
install.packages("EpiEstim")
library(EpiEstim)
dailyNum <- read.csv("..\\results\\ER\\changeRviro\\ctData\\dailyNumID1.csv")
Generation <- read.csv("..\\results\\ER\\changeRviro\\ctData\\GenerationID1.csv")
MCMC_seed <- 1
overall_seed <- 2
R_si_from_sample <- estimate_R(incid=dailyNum,
method = "si_from_data",
si_data = Generation,
config = make_config(list(si_parametric_distr = "L",
n1 = 200, n2 = 30,
seed = overall_seed)))
R_si_from_sample <- estimate_R(incid=dailyNum,
method = "si_from_data",
si_data = Generation,
config = make_config(list(si_parametric_distr = "L",
n1 = 100, n2 = 20,
seed = overall_seed)))
R_si_from_sample <- estimate_R(incid=dailyNum,
method = "si_from_data",
si_data = Generation,
config = make_config(list(si_parametric_distr = "L",
n1 = 50, n2 = 10,
seed = overall_seed)))
R_si_from_sample <- estimate_R(incid=dailyNum,
method = "si_from_data",
si_data = Generation,
config = make_config(list(si_parametric_distr = "L",
n1 = 0, n2 = 10,
seed = overall_seed)))
R_si_from_sample <- estimate_R(incid=dailyNum,
method = "si_from_data",
si_data = Generation,
config = make_config(list(si_parametric_distr = "L",
n1 = 20, n2 = 10,
seed = overall_seed)))
plot(R_si_from_sample, legend=FALSE)
View(R_si_from_sample)
plot(R_si_from_sample, legend=FALSE)
R_si_from_sample$R
class(R_si_from_sample$R)
R_si_from_sample$R$`Mean(R)`
class(R_si_from_sample$R$`Mean(R)`)
R_si_from_sample$R$`Mean(R)`[1]
total <- nrow(dailyNum)
real_total <- nrow(R_si_from_sample$R)
result <- as.character(R_si_from_sample$R$`Mean(R)`[1])
for (i in 2:real_total)
{
result <- paste(result, as.character(R_si_from_sample$R$`Mean(R)`[i]))
}
for (i in 1:total - real_total)
{
result <- paste(result, as.character(0))
}
result
result <- as.character(R_si_from_sample$R$`Mean(R)`[1])
for (i in 2:real_total)
{
result <- paste(result, as.character(R_si_from_sample$R$`Mean(R)`[i]))
}
for (i in 1:(total - real_total))
{
result <- paste(result, as.character(0))
}
result
result <- paste(result, "\n")
result
file_path <- "EpiRt.txt"
writeLines(result, file_path)
